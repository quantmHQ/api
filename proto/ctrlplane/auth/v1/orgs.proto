syntax = "proto3";

package ctrlplane.auth.v1;

import "buf/validate/validate.proto";
import "ctrlplane/events/v1/hooks.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// OrgHooks contains the status of the hooks for an organization.
message OrgHooks {
  ctrlplane.events.v1.RepoHook repo = 1;
  ctrlplane.events.v1.ChatHook chat = 2;
}

// Represents an organization within the control plane.
message Org {
  string id = 1 [(buf.validate.field).string.uuid = true];
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string name = 4;
  string domain = 5;
  string slug = 6;
  OrgHooks hooks = 7;
}

// CreateOrgRequest is the request to create a new organization.
message CreateOrgRequest {
  string name = 1;
  string domain = 2;
  string slug = 3;
}

// CreateOrgResponse is the response to creating a new organization.
message CreateOrgResponse {
  Org org = 1;
}

// GetOrgByIDRequest is the request to retrieve an organization by its unique
// identifier.
message GetOrgByIDRequest {
  string id = 1;
}

// GetOrgByIDResponse is the response to retrieving an organization by its unique
// identifier.
message GetOrgByIDResponse {
  Org org = 1;
}

// SetOrgHooksRequest is the request to set the hooks for an organization.
message SetOrgHooksRequest {
  string org_id = 1;
  OrgHooks hooks = 2;
}

// OrgService provides methods for managing organizations within the control
// plane.
service OrgService {
  // CreateOrg creates a new organization.
  rpc CreateOrg(CreateOrgRequest) returns (CreateOrgResponse);

  // GetOrgByID retrieves an organization by its globally unique identifier.
  rpc GetOrgByID(GetOrgByIDRequest) returns (GetOrgByIDResponse);

  // SetOrgHooks sets the hooks for an organization.
  rpc SetOrgHooks(SetOrgHooksRequest) returns (google.protobuf.Empty);
}
