syntax = "proto3";

package ctrlplane.auth.v1;

import 'ctrlplane/common/v1/enums.proto';
import "ctrlplane/common/v1/uuid.proto";
import "google/protobuf/timestamp.proto";

// Represents a user account within the control plane.
message User {
  ctrlplane.common.v1.UUID id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  ctrlplane.common.v1.UUID org_id = 4;
  string email = 5;
  string first_name = 6;
  string last_name = 7;
  bool is_active = 8;
  bool is_verified = 9;
}

// Request to create a new user account.
message CreateUserRequest {
  string email = 1;
  string first_name = 2;
  string last_name = 3;
  string domain = 4;
}

// Response containing the newly created user account.
message CreateUserResponse {
  User user = 1;
}

// Request to retrieve a user based on their external provider account.
message GetUserByProviderAccountRequest {
  ctrlplane.common.v1.AuthProvider provider = 1;
  string provider_account_id = 2;
}

// Response containing the user retrieved by provider account.
message GetUserByProviderAccountResponse {
  User user = 1;
}

// Request to retrieve a user by their email address.
message GetUserByEmailRequest {
  string email = 1;
}

// Response containing the user retrieved by email.
message GetUserByEmailResponse {
  User user = 1;
}

// Request to retrieve a user by their unique identifier.
message GetUserByIDRequest {
  ctrlplane.common.v1.UUID id = 1;
}

// Response containing the user retrieved by ID.
message GetUserByIDResponse {
  User user = 1;
}

// Request to update an existing user account.
message UpdateUserRequest {
  User user = 1;
}

// Response containing the updated user account.
message UpdateUserResponse {
  User user = 1;
}

// Service providing methods for managing user accounts within the control
// plane.
service UserService {
  // Creates a new user account associated with the given domain.
  // Domains are unique to organizations. If the domain is not registered,
  // a new organization will be created and the user assigned to it.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  // Retrieves a user based on their external provider account.
  rpc GetUserByProviderAccount(GetUserByProviderAccountRequest) returns (GetUserByProviderAccountResponse);

  // Retrieves a user by their email address.
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse);

  // Retrieves a user by their globally unique identifier.
  rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse);

  // Updates an existing user account.
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
}
