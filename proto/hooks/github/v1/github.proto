syntax = "proto3";

package hooks.github.v1;

import "google/protobuf/timestamp.proto";

enum GithubInstallSetupAction {
  INSTALL = 0;
  UPDATE = 1;
}

// Represents a provider's repo within the control plane.
message GithubRepo {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  string repo_id = 4;
  string installation_id = 5;
  int64 github_id = 6;
  string name = 7;
  string full_name = 8;
  string url = 9;
  bool is_active = 10;
}

// Request to create a org's provider's repo.
message CreateGithubRepoRequest {
  string name = 1;
  string full_name = 2;
  string url = 3;
  bool is_active = 4;
  string repo_id = 5;
  string installation_id = 6;
}

// Response to get org's provider's repo.
message CreateGithubRepoResponse {
  GithubRepo github_repo = 1;
}

// Request to get org's provider's repo by id.
message GetGithubRepoByIDRequest {
  string id = 1;
}

// Response to get org's provider's repo.
message GetGithubRepoByIDResponse {
  GithubRepo github_repo = 1;
}

// Request to get org's provider's repo by name.
message GetGithubRepoByNameRequest {
  string name = 1;
}

// Response to get org's provider's repo.
message GetGithubRepoByNameResponse {
  GithubRepo github_repo = 1;
}

message GithubInstallequest {
  int64 installation_id = 1;
  GithubInstallSetupAction action = 2;
  string org_id = 3;
}

service RepoService {
  // Create org's github provider repo.
  rpc CreateRepo(CreateGithubRepoRequest) returns (CreateGithubRepoResponse);

  // Get org's github provider repo by id.
  rpc GetGithubRepoByID(GetGithubRepoByIDRequest) returns (GetGithubRepoByIDResponse);

  // Get org's github provider repo by name.
  rpc GetGithubRepoByName(GetGithubRepoByNameRequest) returns (GetGithubRepoByNameResponse);

  // Install or modify the installation of the github app.
  rpc GithubInstall(GithubInstallRequest) returns (google.protobuf.Empty);
}
