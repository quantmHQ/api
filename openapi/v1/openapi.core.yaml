openapi: 3.0.0

info:
  title: core
  version: 0.0.1

paths:
  /core/blueprints:
    post:
      summary: Create blueprint
      description: Create blueprint
      operationId: create-blueprint
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      requestBody:
        description: blueprints
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintCreateRequest"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blueprint"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/blueprints/{stack_id}:
    get:
      summary: Get blueprint
      description: Get blueprint
      operationId: get-blueprint
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      parameters:
        - name: stack_id
          in: path
          description: Stack ID
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blueprint"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/workloads:
    post:
      summary: Create workload
      description: Create workload
      operationId: create-workload
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      requestBody:
        description: Workload
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadCreateRequest"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workload"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  # Enforce user to provide either of the two query parameters
  /core/workloads/:
    get:
      summary: Get workload
      description: Get workload
      operationId: get-workload
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      parameters:
        - name: repo_id
          in: query
          description: Repo ID
          schema:
            type: string
            format: uuid
            x-go-type: string
        - name: stack_id
          in: query
          description: Stack ID
          schema:
            type: string
            format: uuid
            x-go-type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Workload"
                  - $ref: "#/components/schemas/WorkloadListResponse"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/resources:
    post:
      summary: Create resource
      description: Create resource
      operationId: create-resource
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      requestBody:
        description: Resource
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceCreateRequest"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/resources/{stack_id}:
    get:
      summary: Get resource
      description: Get resource
      operationId: get-resource
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      parameters:
        - name: stack_id
          in: path
          description: Stack ID
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceListResponse"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/stacks:
    post:
      summary: Create stack
      description: Create stack
      operationId: create-stack
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      requestBody:
        description: Stack
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StackCreateRequest"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

    get:
      summary: List stacks
      description: List stacks
      operationId: list-stacks
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StackListResponse"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/stacks/{slug}:
    get:
      summary: Get stack
      description: Get stack
      operationId: get-stack
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      parameters:
        - name: slug
          in: path
          description: Stack slug
          required: true
          schema:
            type: string
            format: slug
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/repos:
    post:
      summary: Create repo
      description: Create repo
      operationId: create-repo
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      requestBody:
        description: Repo
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RepoCreateRequest"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repo"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

    get:
      summary: List Repos
      description: List Repos
      operationId: list-repos
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepoListResponse"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

  /core/repos/{id}:
    get:
      summary: Get repo
      description: Get repo
      operationId: get-repo
      security:
        - BearerAuth: []
        - APIKeyAuth: []
      tags:
        - core
      parameters:
        - name: id
          in: path
          description: Repo ID
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repo"
        "400":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/openapi.spec.yaml#/components/responses/InternalServerError"

components:
  securitySchemes:
    BearerAuth:
      $ref: "../../shared/openapi.spec.yaml#/components/securitySchemes/BearerAuth"
    APIKeyAuth:
      $ref: "../../shared/openapi.spec.yaml#/components/securitySchemes/APIKeyAuth"

  schemas:
    BlueprintCreateRequest:
      type: object
      properties:
        name:
          type: string
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        rollout_budget:
          type: string
        provider_config:
          type: string
        regions:
          $ref: "#/components/schemas/BluePrintRegions"
      required:
        - name
        - stack_id
        - rollout_budget
        - regions
        - provider_config

    WorkloadCreateRequest:
      type: object
      properties:
        name:
          type: string
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        repo_id:
          type: string
          format: uuid
          x-go-name: RepoID
          x-go-type: gocql.UUID
        resource_id:
          type: string
          format: uuid
          x-go-name: ResourceID
          x-go-type: gocql.UUID
        repo_path:
          type: string
        kind:
          type: string
        container:
          type: string
        builder:
          type: string
      required:
        - name
        - stack_id
        - repo_id
        - repo_path
        - resource_id
        - kind
        - container
        - builder

    WorkloadListResponse:
      type: array
      items:
        $ref: "#/components/schemas/Workload"

    ResourceCreateRequest:
      type: object
      properties:
        name:
          type: string
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        provider:
          $ref: "#/components/schemas/CloudProvider"
        driver:
          type: string
        immutable:
          type: boolean
        config:
          type: string
      required:
        - name
        - stack_id
        - provider
        - driver
        - config
        - immutable

    ResourceListResponse:
      type: array
      items:
        $ref: "#/components/schemas/Resource"

    StackCreateRequest:
      type: object
      properties:
        name:
          type: string
        config:
          $ref: "#/components/schemas/StackConfig"
      required:
        - name
        - config

    StackListResponse:
      type: array
      items:
        $ref: "#/components/schemas/Stack"

    RepoCreateRequest:
      type: object
      properties:
        name:
          type: string
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        provider:
          $ref: "#/components/schemas/RepoProvider"
        provider_id:
          type: string
          x-go-name: ProviderID
        default_branch:
          type: string
        is_monorepo:
          type: boolean
      required:
        - name
        - stack_id
        - provider
        - provider_id
        - default_branch
        - is_monorepo

    RepoListResponse:
      type: array
      items:
        $ref: "#/components/schemas/Repo"

    Blueprint:
      type: object
      x-breu-entity: blueprints
      description: "Blueprint contains a collection of Workload & Resource to define one single release"
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        name:
          type: string
        provider_config:
          type: string
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        regions:
          $ref: "#/components/schemas/BluePrintRegions"
        rollout_budget:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - stack_id
        - regions
        - rollout_budget
        - provider_config
        - created_at
        - updated_at

    Workload:
      type: object
      x-breu-entity: workloads
      description: "Workload defines a workload for the app"
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        name:
          type: string
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        repo_id:
          type: string
          format: uuid
          x-go-name: RepoID
          x-go-type: gocql.UUID
        resource_id:
          type: string
          format: uuid
          x-go-name: ResourceID
          x-go-type: gocql.UUID
        repo_path:
          type: string
        kind:
          type: string
          description: "Default, worker, job, cronjob"
        container:
          type: string
          description: "json with keys: image, command, environment, dependencies"
        builder:
          type: string
          description: "json with keys: buildpack, dockerfile, script, external"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - stack_id
        - repo_id
        - repo_path
        - resource_id
        - kind
        - container
        - builder
        - created_at
        - updated_at

    Resource:
      type: object
      x-breu-entity: resources
      description: "Resource defines the cloud provider resources for the app e.g. s3, sqs, etc"
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        name:
          type: string
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        config:
          type: string
          description: "resource configruation e.g properties, output environment variables etc"
        driver:
          $ref: "#/components/schemas/Driver"
        is_immutable:
          type: boolean
        provider:
          $ref: "#/components/schemas/CloudProvider"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - stack_id
        - repo_id
        - driver
        - provider
        - config
        - created_at
        - updated_at
        - is_immutable

    Stack:
      type: object
      x-breu-entity: stacks
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        team_id:
          type: string
          format: uuid
          x-go-name: TeamID
          x-go-type: gocql.UUID
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
        slug:
          type: string
          format: slug
        config:
          $ref: "#/components/schemas/StackConfig"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - team_id
        - name
        - slug
        - config
        - created_at
        - updated_at

    StackConfig:
      type: object
      additionalProperties: true

    Repo:
      type: object
      x-breu-entity: repos
      properties:
        name:
          type: string
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        stack_id:
          type: string
          format: uuid
          x-go-name: StackID
          x-go-type: gocql.UUID
        provider:
          $ref: "#/components/schemas/RepoProvider"
        provider_id:
          type: string
          x-go-name: ProviderID
        default_branch:
          type: string
        is_monorepo:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - id
        - stack_id
        - provider
        - provider_id
        - default_branch
        - is_monorepo
        - created_at
        - updated_at

    RepoProvider:
      type: string
      enum:
        - github
        - gitlab
        - bitbucket

    CloudProvider:
      type: string
      description: "aws, gcp, azure"
      enum:
        - AWS
        - GCP
        - Azure

    BluePrintRegions:
      type: object
      description: BluePrintRegions sets the cloud regions where a blueprint can be deployed
      properties:
        gcp:
          type: array
          items:
            type: string
            x-go-name: GCP
        aws:
          type: array
          items:
            type: string
            x-go-name: AWS
        azure:
          type: array
          items:
            type: string
            x-go-name: AZURE
        default:
          type: array
          items:
            type: string
      required:
        - gcp
        - aws
        - azure
        - default

    ProviderConfiguration:
      type: object
      description: Provider config defines configuration specific to a cloud provider
      properties:
        gcp:
          type: string
        aws:
          type: string
        azure:
          type: string
        default:
          type: string
      required:
        - gcp
        - aws
        - azure
        - default

    GCPDriver:
      type: string
      description: "gke, cloudrun, pubsub etc"
      enum:
        - gke
        - cloudrun
        - pubsub

    AWSDriver:
      type: string
      description: "s3, sqs, sns, dynamodb, postgres, mysql etc"
      enum:
        - s3
        - sns
        - sqs

    Driver:
      type: string
      description: "gke, cloudrun, pubsub, s3, sqs, sns, dynamodb, postgres, mysql etc"
      enum:
        - gke
        - cloudrun
        - pubsub
        - s3
        - sns
        - sqs
