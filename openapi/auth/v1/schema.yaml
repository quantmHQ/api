openapi: 3.0.0
info:
  title: auth
  version: 0.0.1

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user
      operationId: register
      tags:
        - auth
      requestBody:
        description: User to register
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterationRequest"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterationResponse"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
  /auth/login:
    post:
      summary: Login
      description: Login
      operationId: login
      tags:
        - auth
      requestBody:
        description: Login request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
  /auth/api-keys/user:
    post:
      summary: Create a new API key for the user
      description: Create a new API key for the user
      operationId: create-user-API-key
      tags:
        - auth
      requestBody:
        description: API key to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAPIKeyRequest"
      security:
        - BearerAuth: []
      responses:
        "201":
          description: API key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAPIKeyResponse"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
  /auth/api-keys/team:
    post:
      summary: Create a new API key for the team
      description: Create a new API key for the team
      operationId: create-team-API-key
      tags:
        - auth
      requestBody:
        description: API key to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAPIKeyRequest"
      security:
        - BearerAuth: []
      responses:
        "201":
          description: API key created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAPIKeyResponse"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
  /auth/api-keys/validate:
    get:
      summary: Validate an API key
      description: Validate an API key
      operationId: validate-API-key
      tags:
        - auth
      security:
        - APIKeyAuth: []
      responses:
        "200":
          description: API key validated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIKeyValidationResponse"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
  /auth/teams:
    get:
      summary: List all teams the user is a member of
      description: List all teams the user is a member of
      operationId: list-teams
      tags:
        - auth
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Teams retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamList"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
    post:
      summary: Create a new team
      description: Create a new team
      operationId: create-team
      tags:
        - auth
      requestBody:
        description: Team to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
      security:
        - BearerAuth: []
      responses:
        "201":
          description: Team created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
  /auth/teams/{slug}:
    get:
      summary: Get a team
      description: Get a team
      operationId: get-team
      tags:
        - auth
      parameters:
        - name: slug
          in: path
          description: Team slug
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Team retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/v1/schema.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"

  /auth/teams/{slug}/users:
    post:
      summary: Add a user to a team
      description: Add a user to a team
      operationId: add-user-to-team
      tags:
        - auth
      parameters:
        - name: slug
          in: path
          description: Team slug
          required: true
          schema:
            type: string
      requestBody:
        description: User to add to the team
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserToTeamRequest"
      security:
        - BearerAuth: []
      responses:
        "201":
          description: User added to team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamUser"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/v1/schema.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"

  /auth/users:
    post:
      summary: create user authjs
      description: create user authjs
      operationId: create-user
      tags:
        - auth
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"
    get:
      summary: get users
      description: get user by provider and provider account id
      operationId: list-users
      tags:
        - auth
      parameters:
        - name: provider_account_id
          in: query
          description: Provider account ID
          required: false
          schema:
            type: string
        - name: provider
          in: query
          description: Provider type
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: user email
          required: false
          schema:
            type: string
      responses:
        "200":
          description: user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/v1/schema.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"

  /auth/users/{id}:
    get:
      summary: get user by id
      description: get user by id
      operationId: get-user
      tags:
        - auth
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get user by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "404":
          $ref: "../../shared/v1/schema.yaml#/components/responses/NotFound"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"

  /auth/accounts/link:
    post:
      summary: link user with account
      description: link user with account
      operationId: link-account
      tags:
        - auth
      requestBody:
        description: link user to account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkAccountRequest"
      responses:
        "200":
          description: link user to account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          $ref: "../../shared/v1/schema.yaml#/components/responses/BadRequest"
        "401":
          $ref: "../../shared/v1/schema.yaml#/components/responses/Unauthorized"
        "500":
          $ref: "../../shared/v1/schema.yaml#/components/responses/InternalServerError"

components:
  securitySchemes:
    BearerAuth:
      $ref: "../../shared/v1/schema.yaml#/components/securitySchemes/BearerAuth"
    APIKeyAuth:
      $ref: "../../shared/v1/schema.yaml#/components/securitySchemes/APIKeyAuth"

  schemas:
    RegisterationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          x-go-type: string
        password:
          type: string
          format: password
        confirm_password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
        team_name:
          type: string
      required:
        - email
        - password
        - confirm_password
        - first_name
        - last_name
        - team_name

    RegisterationResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        team:
          $ref: "#/components/schemas/Team"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          x-go-type: string
        password:
          type: string
          format: password
      required:
        - email
        - password

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
      required:
        - access_token
        - refresh_token

    CreateAPIKeyRequest:
      type: object
      properties:
        name:
          type: string

    CreateAPIKeyResponse:
      type: object
      properties:
        key:
          type: string

    APIKeyValidationResponse:
      type: object
      properties:
        message:
          type: string

    Team:
      type: object
      x-breu-entity: teams
      x-breu-entity-type: cql
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
        slug:
          type: string
          format: slug
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - slug
        - created_at
        - updated_at

    CreateTeamRequest:
      type: object
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate:
      required:
        - name

    TeamList:
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: "#/components/schemas/Team"

    User:
      type: object
      x-breu-entity: users
      x-breu-entity-type: cql
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        team_id:
          type: string
          format: uuid
          x-go-name: TeamID
          x-go-type: gocql.UUID
        email:
          type: string
          format: email
          x-go-type: string
          x-oapi-codegen-extra-tags:
            validate: email,required,db_unique
        password:
          type: string
          format: password
          x-go-json-ignore: true
        first_name:
          type: string
        last_name:
          type: string
        is_verified:
          type: boolean
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - team_id
        - email
        - password
        - first_name
        - last_name
        - is_verified
        - is_active
        - created_at
        - updated_at

    AddUserToTeamRequest:
      type: object
      properties:
        team_id:
          type: string
          format: uuid
      required:
        - team_id

    TeamUser:
      type: object
      x-breu-entity: team_users
      x-breu-entity-type: cql
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        team_id:
          type: string
          format: uuid
          x-go-name: TeamID
          x-go-type: gocql.UUID
        user_id:
          type: string
          format: uuid
          x-go-name: UserID
          x-go-type: gocql.UUID
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - team_id
        - user_id
        - created_at
        - updated_at

    Account:
      type: object
      x-breu-entity: oauth_accounts
      x-breu-entity-type: cql
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        user_id:
          type: string
          format: uuid
          x-go-name: UserID
          x-go-type: gocql.UUID
        type:
          $ref: "#/components/schemas/AccountTypeEnum"
        provider:
          type: string
        provider_account_id:
          type: string
          x-go-name: ProviderAccountID
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - type
        - provider
        - provider_account_id
        - expires_at
        - created_at
        - updated_at

    UserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email

    LinkAccountRequest:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          x-go-name: UserID
          x-go-type: gocql.UUID
        type:
          $ref: "#/components/schemas/AccountTypeEnum"
        provider:
          type: string
        provider_account_id:
          type: string
          x-go-name: ProviderAccountID
        expires_at:
          type: string
          format: date-time
      required:
        - user_id
        - type
        - provider
        - provider_account_id
        - expires_at

    AccountTypeEnum:
      type: string
      description: oauth account type enum
      enum:
        - oidc
        - oauth
        - email
        - webauthn
