openapi: 3.0.0
info:
  title: auth
  version: 0.0.1

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user
      operationId: register
      tags:
        - auth
      requestBody:
        description: User to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterationRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterationResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/login:
    post:
      summary: Login
      description: Login
      operationId: login
      tags:
        - auth
      requestBody:
        description: Login request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/api-keys/user:
    post:
      summary: Create a new API key for the user
      description: Create a new API key for the user
      operationId: create-user-API-key
      tags:
        - auth
      requestBody:
        description: API key to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAPIKeyResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/api-keys/team:
    post:
      summary: Create a new API key for the team
      description: Create a new API key for the team
      operationId: create-team-API-key
      tags:
        - auth
      requestBody:
        description: API key to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAPIKeyResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/api-keys/validate:
    get:
      summary: Validate an API key
      description: Validate an API key
      operationId: validate-API-key
      tags:
        - auth
      security:
        - APIKeyAuth: []
      responses:
        '200':
          description: API key validated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKeyValidationResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/teams:
    get:
      summary: List all teams the user is a member of
      description: List all teams the user is a member of
      operationId: list-teams
      tags:
        - auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Teams retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamList'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
    post:
      summary: Create a new team
      description: Create a new team
      operationId: create-team
      tags:
        - auth
      requestBody:
        description: Team to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/teams/{slug}:
    get:
      summary: Get a team
      description: Get a team
      operationId: get-team
      tags:
        - auth
      parameters:
        - name: slug
          in: path
          description: Team slug
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Team retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'

  /auth/teams/{slug}/users:
    post:
      summary: Add a user to a team
      description: Add a user to a team
      operationId: add-user-to-team
      tags:
        - auth
      parameters:
        - name: slug
          in: path
          description: Team slug
          required: true
          schema:
            type: string
      requestBody:
        description: User to add to the team
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserToTeamRequest'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: User added to team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamUser'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'

  /auth/user:
    post:
      summary: create user authjs
      description: create user authjs
      operationId: create-user
      tags:
        - auth
        - user
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
    get:
      summary: get user by provider and provider account id
      description: get user by provider and provider account id
      operationId: get-user-by-account
      tags:
        - auth
        - user
      parameters:
        - name: provider_account_id
          in: query
          description: Provider account ID
          required: true
          schema:
            type: string
        - name: provider
          in: query
          description: Provider type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get user by provider and provider account id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/user/{email}:
    get:
      summary: get user by email
      description: get user by email
      operationId: get-user-by-email
      tags:
        - auth
        - user
      parameters:
        - name: email
          in: path
          description: user email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get user by email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/user/{id}:
    get:
      summary: get user by id
      description: get user by id
      operationId: get-user
      tags:
        - auth
        - user
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
    put:
      summary: update user by id
      description: update user by id
      operationId: update-user
      tags:
        - auth
        - user
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: string
      requestBody:
        description: User to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: update user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
    delete:
      summary: delete user by id
      description: delete user by id
      operationId: delete-user
      tags:
        - auth
        - user
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete user by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'

  /auth/link-account:
    post:
      summary: link user with account
      description: link user with account
      operationId: link-account
      tags:
        - auth
        - account
      requestBody:
        description: link user to account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkAccount'
      responses:
        '200':
          description: link user to account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accounts'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/unlink-account:
    delete:
      summary: unlink account
      description: unlink account
      operationId: unlink-account
      tags:
        - auth
        - account
      parameters:
        - name: provider_account_id
          in: query
          description: Provider account ID
          required: true
          schema:
            type: string
        - name: provider
          in: query
          description: Provider type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: unlink account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'

  /auth/session:
    post:
      summary: create session
      description: create session
      operationId: create-session
      tags:
        - auth
        - session
      requestBody:
        description: session to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '201':
          description: session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sessions'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/session/{session_token}:
    get:
      summary: get user by session token along with session data
      description: get user by session token along with session data
      operationId: get-session-and-user
      tags:
        - auth
        - user
        - session
      parameters:
        - name: session_token
          in: path
          description: session token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get user by session token along with session data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAndSession'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
    put:
      summary: update session by session_token
      description: update session by session_token
      operationId: update-session
      tags:
        - auth
        - session
      parameters:
        - name: session_token
          in: path
          description: session token
          required: true
          schema:
            type: string
      requestBody:
        description: Session to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: update session by session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sessions'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
    delete:
      summary: delete session by session token
      description: delete user by id
      operationId: delete-session
      tags:
        - auth
        - user
      parameters:
        - name: session_token
          in: path
          description: session token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete session by session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'

  /auth/verification_token:
    post:
      summary: create verification token
      description: create verification token
      operationId: create-verification-token
      tags:
        - auth
        - verification-token
      requestBody:
        description: verification token to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationTokenRequest'
      responses:
        '201':
          description: verification token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationToken'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'
  /auth/verification_token/{identifier}:
    get:
      summary: get the verification token by identifier and then delete from database
      description: get the verification token by identifier and then delete from database
      operationId: use-verification-token
      tags:
        - auth
        - verification-token
      parameters:
        - name: identifier
          in: path
          description: token identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get verification token for usage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationToken'
        '400':
          $ref: '../../shared/v1/schema.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../shared/v1/schema.yaml#/components/responses/Unauthorized'
        '404':
          $ref: '../../shared/v1/schema.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../shared/v1/schema.yaml#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      $ref: '../../shared/v1/schema.yaml#/components/securitySchemes/BearerAuth'
    APIKeyAuth:
      $ref: '../../shared/v1/schema.yaml#/components/securitySchemes/APIKeyAuth'

  schemas:
    RegisterationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          x-go-type: string
        password:
          type: string
          format: password
        confirm_password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
        team_name:
          type: string
      required:
        - email
        - password
        - confirm_password
        - first_name
        - last_name
        - team_name

    RegisterationResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        team:
          $ref: '#/components/schemas/Team'

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          x-go-type: string
        password:
          type: string
          format: password
      required:
        - email
        - password

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
      required:
        - access_token
        - refresh_token

    CreateAPIKeyRequest:
      type: object
      properties:
        name:
          type: string

    CreateAPIKeyResponse:
      type: object
      properties:
        key:
          type: string

    APIKeyValidationResponse:
      type: object
      properties:
        message:
          type: string

    Team:
      type: object
      x-breu-entity: teams
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
        slug:
          type: string
          format: slug
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - slug
        - created_at
        - updated_at

    CreateTeamRequest:
      type: object
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate: required
        slug:
          type: string
          format: slug

    TeamList:
      type: object
      properties:
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'

    User:
      type: object
      x-breu-entity: users
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        team_id:
          type: string
          format: uuid
          x-go-name: TeamID
          x-go-type: gocql.UUID
        email:
          type: string
          format: email
          x-go-type: string
          x-oapi-codegen-extra-tags:
            validate: email,required,db_unique
        password:
          type: string
          format: password
          x-go-json-ignore: true
        first_name:
          type: string
        last_name:
          type: string
        is_verified:
          type: boolean
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - team_id
        - email
        - password
        - first_name
        - last_name
        - is_verified
        - is_active
        - created_at
        - updated_at

    AddUserToTeamRequest:
      type: object
      properties:
        team_id:
          type: string
          format: uuid
      required:
        - team_id

    TeamUser:
      type: object
      x-breu-entity: team_users
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        team_id:
          type: string
          format: uuid
          x-go-name: TeamID
          x-go-type: gocql.UUID
        user_id:
          type: string
          format: uuid
          x-go-name: UserID
          x-go-type: gocql.UUID
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - team_id
        - user_id
        - created_at
        - updated_at

    Accounts:
      type: object
      x-breu-entity: acounts
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        user_id:
          type: string
          x-go-name: UserID
        type:
          type: string
        provider:
          type: string
        provider_account_id:
          type: string
          x-go-name: ProviderAccountId
        refresh_token:
          type: string
        access_token:
          type: string
        expires_at:
          type: string
          format: date-time
        id_token:
          type: string
        scope:
          type: string
        session_state:
          type: string
        token_type:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - type
        - provider
        - provider_account_id
        - refresh_token
        - access_token
        - expires_at
        - id_token
        - scope
        - session_state
        - token_type
        - created_at
        - updated_at

    Users:
      type: object
      x-breu-entity: users
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        name:
          type: string
        email:
          type: string
        email_verified:
          type: string
          format: date-time
        image:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - email
        - email_verified
        - image
        - created_at
        - updated_at

    Sessions:
      type: object
      x-breu-entity: sessions
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        user_id:
          type: string
          x-go-name: UserID
        expires:
          type: string
          format: date-time
        session_token:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - expires
        - session_token
        - created_at

    VerificationToken:
      type: object
      x-breu-entity: verification_token
      properties:
        id:
          type: string
          format: uuid
          x-go-name: ID
          x-go-type: gocql.UUID
        identifier:
          type: string
        token:
          type: string
        expires:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - identifier
        - token
        - expires
        - created_at
        - updated_at

    UserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        email_verified:
          type: string
          format: date-time
        image:
          type: string
      required:
        - name
        - email
        - email_verified
        - image

    LinkAccount:
      type: object
      properties:
        user_id:
          type: string
          x-go-name: UserID
        type:
          type: string
        provider:
          type: string
        provider_account_id:
          type: string
        refresh_token:
          type: string
        access_token:
          type: string
        expires_at:
          type: string
          format: date-time
        id_token:
          type: string
        scope:
          type: string
        session_state:
          type: string
        token_type:
          type: string
      required:
        - user_id
        - type
        - provider
        - provider_account_id
        - refresh_token
        - access_token
        - expires_at
        - id_token
        - scope
        - session_state
        - token_type

    DeleteResponse:
      type: object
      properties:
        ok:
          type: boolean
          description: Indicates if the operation was successful.
        message:
          type: string
          description: A descriptive message about the operation result.
      required:
        - ok
        - message

    SessionRequest:
      type: object
      properties:
        user_id:
          type: string
          x-go-name: UserID
        expires:
          type: string
          format: date-time
        session_token:
          type: string
      required:
        - user_id
        - expires
        - session_token

    UserAndSession:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/Users'
        session:
          $ref: '#/components/schemas/Sessions'
      required:
        - user
        - session

    VerificationTokenRequest:
      type: object
      properties:
        identifier:
          type: string
        token:
          type: string
        expires:
          type: string
          format: date-time
      required:
        - identifier
        - token
        - expires
