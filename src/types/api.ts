/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/register": {
    /**
     * Register a new user
     * @description Register a new user
     */
    post: operations["register"];
  };
  "/auth/login": {
    /**
     * Login
     * @description Login
     */
    post: operations["login"];
  };
  "/auth/api-keys/user": {
    /**
     * Create a new API key for the user
     * @description Create a new API key for the user
     */
    post: operations["create-user-API-key"];
  };
  "/auth/api-keys/team": {
    /**
     * Create a new API key for the team
     * @description Create a new API key for the team
     */
    post: operations["create-team-API-key"];
  };
  "/auth/api-keys/validate": {
    /**
     * Validate an API key
     * @description Validate an API key
     */
    get: operations["validate-API-key"];
  };
  "/auth/teams": {
    /**
     * List all teams the user is a member of
     * @description List all teams the user is a member of
     */
    get: operations["list-teams"];
    /**
     * Create a new team
     * @description Create a new team
     */
    post: operations["create-team"];
  };
  "/auth/teams/{slug}": {
    /**
     * Get a team
     * @description Get a team
     */
    get: operations["get-team"];
  };
  "/auth/teams/{slug}/users": {
    /**
     * Add a user to a team
     * @description Add a user to a team
     */
    post: operations["add-user-to-team"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    RegisterationRequest: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
      /** Format: password */
      confirm_password: string;
      first_name: string;
      last_name: string;
      team_name: string;
    };
    RegisterationResponse: {
      user?: components["schemas"]["User"];
      team?: components["schemas"]["Team"];
    };
    LoginRequest: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
    };
    TokenResponse: {
      access_token: string;
      refresh_token: string;
    };
    CreateAPIKeyRequest: {
      name?: string;
    };
    CreateAPIKeyResponse: {
      key?: string;
    };
    APIKeyValidationResponse: {
      message?: string;
    };
    Team: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: slug */
      slug: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    CreateTeamRequest: {
      name?: string;
      /** Format: slug */
      slug?: string;
    };
    TeamList: {
      teams?: components["schemas"]["Team"][];
    };
    User: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      team_id: string;
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
      first_name: string;
      last_name: string;
      is_verified: boolean;
      is_active: boolean;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    AddUserToTeamRequest: {
      /** Format: uuid */
      team_id: string;
    };
    TeamUser: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      team_id: string;
      /** Format: uuid */
      user_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface external {
  "../shared/openapi.spec.yaml": {
    paths: Record<string, never>;
    webhooks: Record<string, never>;
    components: {
      schemas: {
        /** @description defines the structure of an API error response */
        APIError: {
          message: string;
          code: number;
          internal: string;
          errors?: Record<string, never>;
        };
      };
      responses: {
        /** @description Bad Request */
        BadRequest: {
          content: {
            "application/json": external["../shared/openapi.spec.yaml"]["components"]["schemas"]["APIError"];
          };
        };
        /** @description Unauthorized */
        Unauthorized: {
          content: {
            "application/json": external["../shared/openapi.spec.yaml"]["components"]["schemas"]["APIError"];
          };
        };
        /** @description Not Found */
        NotFound: {
          content: {
            "application/json": external["../shared/openapi.spec.yaml"]["components"]["schemas"]["APIError"];
          };
        };
        /** @description Internal server error */
        InternalServerError: {
          content: {
            "application/json": external["../shared/openapi.spec.yaml"]["components"]["schemas"]["APIError"];
          };
        };
      };
      parameters: never;
      requestBodies: never;
      headers: never;
      pathItems: never;
    };
    $defs: Record<string, never>;
  };
}

export interface operations {

  /**
   * Register a new user
   * @description Register a new user
   */
  register: {
    /** @description User to register */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RegisterationRequest"];
      };
    };
    responses: {
      /** @description User created */
      201: {
        content: {
          "application/json": components["schemas"]["RegisterationResponse"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * Login
   * @description Login
   */
  login: {
    /** @description Login request */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description Login response */
      200: {
        content: {
          "application/json": components["schemas"]["TokenResponse"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * Create a new API key for the user
   * @description Create a new API key for the user
   */
  "create-user-API-key": {
    /** @description API key to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateAPIKeyRequest"];
      };
    };
    responses: {
      /** @description API key created */
      201: {
        content: {
          "application/json": components["schemas"]["CreateAPIKeyResponse"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * Create a new API key for the team
   * @description Create a new API key for the team
   */
  "create-team-API-key": {
    /** @description API key to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateAPIKeyRequest"];
      };
    };
    responses: {
      /** @description API key created */
      201: {
        content: {
          "application/json": components["schemas"]["CreateAPIKeyResponse"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * Validate an API key
   * @description Validate an API key
   */
  "validate-API-key": {
    responses: {
      /** @description API key validated */
      200: {
        content: {
          "application/json": components["schemas"]["APIKeyValidationResponse"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * List all teams the user is a member of
   * @description List all teams the user is a member of
   */
  "list-teams": {
    responses: {
      /** @description Teams retrieved */
      200: {
        content: {
          "application/json": components["schemas"]["TeamList"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * Create a new team
   * @description Create a new team
   */
  "create-team": {
    /** @description Team to create */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTeamRequest"];
      };
    };
    responses: {
      /** @description Team created */
      201: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * Get a team
   * @description Get a team
   */
  "get-team": {
    parameters: {
      path: {
        /** @description Team slug */
        slug: string;
      };
    };
    responses: {
      /** @description Team retrieved */
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["../shared/openapi.spec.yaml"]["components"]["responses"]["NotFound"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
  /**
   * Add a user to a team
   * @description Add a user to a team
   */
  "add-user-to-team": {
    parameters: {
      path: {
        /** @description Team slug */
        slug: string;
      };
    };
    /** @description User to add to the team */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AddUserToTeamRequest"];
      };
    };
    responses: {
      /** @description User added to team */
      201: {
        content: {
          "application/json": components["schemas"]["TeamUser"];
        };
      };
      400: external["../shared/openapi.spec.yaml"]["components"]["responses"]["BadRequest"];
      401: external["../shared/openapi.spec.yaml"]["components"]["responses"]["Unauthorized"];
      404: external["../shared/openapi.spec.yaml"]["components"]["responses"]["NotFound"];
      500: external["../shared/openapi.spec.yaml"]["components"]["responses"]["InternalServerError"];
    };
  };
}
