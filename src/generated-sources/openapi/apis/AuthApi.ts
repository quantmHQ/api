/* tslint:disable */
/* eslint-disable */
/**
 * auth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIError,
  APIKeyValidationResponse,
  AddUserToTeamRequest,
  CreateAPIKeyRequest,
  CreateAPIKeyResponse,
  CreateTeamRequest,
  LoginRequest,
  RegisterationRequest,
  RegisterationResponse,
  Team,
  TeamList,
  TeamUser,
  TokenResponse,
} from '../models/index';
import {
    APIErrorFromJSON,
    APIErrorToJSON,
    APIKeyValidationResponseFromJSON,
    APIKeyValidationResponseToJSON,
    AddUserToTeamRequestFromJSON,
    AddUserToTeamRequestToJSON,
    CreateAPIKeyRequestFromJSON,
    CreateAPIKeyRequestToJSON,
    CreateAPIKeyResponseFromJSON,
    CreateAPIKeyResponseToJSON,
    CreateTeamRequestFromJSON,
    CreateTeamRequestToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    RegisterationRequestFromJSON,
    RegisterationRequestToJSON,
    RegisterationResponseFromJSON,
    RegisterationResponseToJSON,
    TeamFromJSON,
    TeamToJSON,
    TeamListFromJSON,
    TeamListToJSON,
    TeamUserFromJSON,
    TeamUserToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
} from '../models/index';

export interface AddUserToTeamOperationRequest {
    slug: string;
    addUserToTeamRequest?: AddUserToTeamRequest;
}

export interface CreateTeamOperationRequest {
    createTeamRequest?: CreateTeamRequest;
}

export interface CreateTeamAPIKeyRequest {
    createAPIKeyRequest?: CreateAPIKeyRequest;
}

export interface CreateUserAPIKeyRequest {
    createAPIKeyRequest?: CreateAPIKeyRequest;
}

export interface GetTeamRequest {
    slug: string;
}

export interface LoginOperationRequest {
    loginRequest?: LoginRequest;
}

export interface RegisterRequest {
    registerationRequest?: RegisterationRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Add a user to a team
     * Add a user to a team
     */
    async addUserToTeamRaw(requestParameters: AddUserToTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamUser>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling addUserToTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/teams/{slug}/users`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserToTeamRequestToJSON(requestParameters.addUserToTeamRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamUserFromJSON(jsonValue));
    }

    /**
     * Add a user to a team
     * Add a user to a team
     */
    async addUserToTeam(requestParameters: AddUserToTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamUser> {
        const response = await this.addUserToTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new team
     * Create a new team
     */
    async createTeamRaw(requestParameters: CreateTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/teams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamRequestToJSON(requestParameters.createTeamRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Create a new team
     * Create a new team
     */
    async createTeam(requestParameters: CreateTeamOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.createTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new API key for the team
     * Create a new API key for the team
     */
    async createTeamAPIKeyRaw(requestParameters: CreateTeamAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAPIKeyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/api-keys/team`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAPIKeyRequestToJSON(requestParameters.createAPIKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAPIKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create a new API key for the team
     * Create a new API key for the team
     */
    async createTeamAPIKey(requestParameters: CreateTeamAPIKeyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAPIKeyResponse> {
        const response = await this.createTeamAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new API key for the user
     * Create a new API key for the user
     */
    async createUserAPIKeyRaw(requestParameters: CreateUserAPIKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAPIKeyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/api-keys/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAPIKeyRequestToJSON(requestParameters.createAPIKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAPIKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create a new API key for the user
     * Create a new API key for the user
     */
    async createUserAPIKey(requestParameters: CreateUserAPIKeyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAPIKeyResponse> {
        const response = await this.createUserAPIKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a team
     * Get a team
     */
    async getTeamRaw(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Team>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getTeam.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/teams/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamFromJSON(jsonValue));
    }

    /**
     * Get a team
     * Get a team
     */
    async getTeam(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Team> {
        const response = await this.getTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all teams the user is a member of
     * List all teams the user is a member of
     */
    async listTeamsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/teams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamListFromJSON(jsonValue));
    }

    /**
     * List all teams the user is a member of
     * List all teams the user is a member of
     */
    async listTeams(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamList> {
        const response = await this.listTeamsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login
     * Login
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Login
     * Login
     */
    async login(requestParameters: LoginOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new user
     * Register a new user
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterationRequestToJSON(requestParameters.registerationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterationResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user
     * Register a new user
     */
    async register(requestParameters: RegisterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterationResponse> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate an API key
     * Validate an API key
     */
    async validateAPIKeyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyValidationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // APIKeyAuth authentication
        }

        const response = await this.request({
            path: `/auth/api-keys/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate an API key
     * Validate an API key
     */
    async validateAPIKey(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyValidationResponse> {
        const response = await this.validateAPIKeyRaw(initOverrides);
        return await response.value();
    }

}
